{"version":3,"sources":["components/TodoTemplate.js","TodoContenxt.js","components/TodoHead.js","components/TodoItem.js","components/TodoList.js","components/TodoCreate.js","App.js","index.js"],"names":["TodoTemplateBlock","styled","div","TodoTemplate","children","initialTodos","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","todoReducer","state","action","type","concat","todo","map","id","done","filter","Error","TodoProvider","useReducer","dispatch","nextId","useRef","Provider","value","useTodoState","context","useContext","useTodoDispatch","TodoHeadBlock","TodoHead","undoneTasks","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","className","length","Remove","CheckCircle","props","css","Text","TodoItemBlock","React","memo","text","onClick","CheckOutlined","DeleteOutlined","TodoListBlock","TodoList","todos","key","CircleButton","button","open","InsertFormPositioner","InsertForm","form","Input","input","useState","setOpen","setValue","useTodoNextId","onSubmit","e","preventDefault","current","placeholder","autoFocus","onChange","target","PlusOutlined","GlobalStyle","createGlobalStyle","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8dbb081.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst TodoTemplateBlock = styled.div`\n  width: 512px;\n  height: 768px;\n\n  position: relative; /* 추가 + 기능을 최하단에 렌더링할 수 있게 하는 속성 */\n  background: white;\n  border-radius: 16px;\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.04);\n\n  margin: 0 auto;\n  margin-top: 96px;\n  margin-bottom: 32px;\n\n  display: flex;\n  flex-direction: column;\n`;\n\nconst TodoTemplate = ({ children }) => {\n  return <TodoTemplateBlock>{children}</TodoTemplateBlock>;\n};\n\nexport default TodoTemplate;\n","import React, { useReducer, createContext, useContext, useRef } from 'react';\n\nconst initialTodos = [];\n\nconst TodoStateContext = createContext();\nconst TodoDispatchContext = createContext();\nconst TodoNextIdContext = createContext();\n\n// useReducer에서 사용할 함수 만들기\n/*\n    3가지 액션 만들기\n    CREATE\n    TOGGLE\n    REMOVE\n*/\n\n// state와 action을 가져와서 다음 상태를 return해주는 함수\nfunction todoReducer(state, action) {\n  switch (action.type) {\n    case 'CREATE':\n      return state.concat(action.todo);\n    case 'TOGGLE':\n      return state.map((todo) =>\n        todo.id === action.id ? { ...todo, done: !todo.done } : todo,\n      );\n    case 'REMOVE':\n      return state.filter((todo) => todo.id !== action.id);\n    default:\n      throw new Error(`Unhandle action type: ${action.type}`);\n  }\n}\n\nexport function TodoProvider({ children }) {\n  const [state, dispatch] = useReducer(todoReducer, initialTodos);\n  const nextId = useRef(5);\n  return (\n    <TodoStateContext.Provider value={state}>\n      <TodoDispatchContext.Provider value={dispatch}>\n        <TodoNextIdContext.Provider value={nextId}>\n          {children}\n        </TodoNextIdContext.Provider>\n      </TodoDispatchContext.Provider>\n    </TodoStateContext.Provider>\n  );\n}\n\n// 커스텀 Hook 만들기\nexport function useTodoState() {\n  const context = useContext(TodoStateContext);\n  if (!context) {\n    throw new Error('Cannot find TodoProvider');\n  }\n  return context;\n}\n\nexport function useTodoDispatch() {\n  const context = useContext(TodoDispatchContext);\n  if (!context) {\n    throw new Error('Cannot find TodoProvider');\n  }\n  return context;\n}\n\nexport function useTodoNextId() {\n  const context = useContext(TodoNextIdContext);\n  if (!context) {\n    throw new Error('Cannot find TodoProvider');\n  }\n  return context;\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useTodoState } from '../TodoContenxt';\n\nconst TodoHeadBlock = styled.div`\n  padding-top: 48px;\n  padding-left: 32px;\n  padding-right: 32px;\n  padding-bottom: 24px;\n  border-bottom: 1px solid #e9ecef;\n\n  h1 {\n    margin: 0;\n    font-size: 36px;\n    color: #343a40;\n  }\n  .day {\n    margin-top: 4px;\n    color: #868e96;\n    font-size: 21px;\n  }\n  .tasks-left {\n    color: #20c997;\n    font-size: 18px;\n    margin-top: 40px;\n    font-weight: bold;\n  }\n`;\n\nconst TodoHead = () => {\n  const todos = useTodoState();\n  const undoneTasks = todos.filter((todo) => !todo.done);\n\n  const today = new Date();\n  const dateString = today.toLocaleDateString('ko-KR', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  });\n  const dayName = today.toLocaleDateString('ko-KR', {\n    weekday: 'long',\n  });\n\n  return (\n    <div>\n      <TodoHeadBlock>\n        <h1>{dateString}</h1>\n        <div className=\"day\">{dayName}</div>\n        <div className=\"tasks-left\">할일 {undoneTasks.length}개 남음</div>\n      </TodoHeadBlock>\n    </div>\n  );\n};\n\nexport default TodoHead;\n","import React from 'react';\nimport { CheckOutlined, DeleteOutlined } from '@ant-design/icons';\nimport styled, { css } from 'styled-components';\nimport { useTodoDispatch } from '../TodoContenxt';\n\n// 우측에 나타나는 쓰레기통 보여주는 컴포넌트\nconst Remove = styled.div`\n  opacity: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #dee2e6;\n  font-size: 24px;\n  cursor: pointer;\n  &:hover {\n    color: #ff6b6b;\n  }\n`;\n// 왼쪽에 있는 체크를 보여주는 컴포넌트\nconst CheckCircle = styled.div`\n  width: 32px;\n  height: 32px;\n  border-radius: 16px;\n  border: 1px solid #ced4da;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 20px;\n  cursor: pointer;\n  ${(props) =>\n    props.done &&\n    css`\n      font-size: 18px; /*font-size가 의미하는 건 아이콘 크기*/\n      border: 1px solid #38d9a0;\n      color: #38d9a9;\n    `}\n`;\n// 텍스트를 보여주는 컴포넌트\nconst Text = styled.div`\n  flex: 1;\n  font-size: 21px;\n  color: #495057;\n  ${(props) =>\n    props.done &&\n    css`\n      color: #ced4da;\n    `}\n`;\n// 위 3개의 컴포넌트가 안으로 들어가지게 만드는 컴포넌트\nconst TodoItemBlock = styled.div`\n  display: flex;\n  align-items: center;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  &:hover {\n    ${Remove} {\n      opacity: 1;\n    }\n  }\n`;\n\nconst TodoItem = ({ id, done, text }) => {\n  const dispatch = useTodoDispatch();\n  const onToggle = () =>\n    dispatch({\n      type: 'TOGGLE',\n      id,\n    });\n  const onRemove = () =>\n    dispatch({\n      type: 'REMOVE',\n      id,\n    });\n  return (\n    <div>\n      <TodoItemBlock>\n        <CheckCircle done={done} onClick={onToggle}>\n          {done && <CheckOutlined />}\n        </CheckCircle>\n        <Text done={done}>{text}</Text>\n        <Remove onClick={onRemove}>\n          <DeleteOutlined />\n        </Remove>\n      </TodoItemBlock>\n    </div>\n  );\n};\n\nexport default React.memo(TodoItem);\n","import React from 'react';\nimport styled from 'styled-components';\nimport TodoItem from './TodoItem';\nimport { useTodoState } from '../TodoContenxt';\n\nconst TodoListBlock = styled.div`\n  flex: 1; /* 자신이 차지할 수 있는 영역 다 차지함 (display: flex가 된 상황에서) */\n  padding: 20px 32px;\n  padding-bottom: 48px;\n  overflow-y: auto;\n`;\n\nconst TodoList = () => {\n  const todos = useTodoState();\n  return (\n    <TodoListBlock>\n      {todos.map((todo) => (\n        <TodoItem\n          key={todo.id}\n          id={todo.id}\n          text={todo.text}\n          done={todo.done}\n        />\n      ))}\n    </TodoListBlock>\n  );\n};\n\nexport default TodoList;\n","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { useTodoDispatch, useTodoNextId } from '../TodoContenxt';\n\nconst CircleButton = styled.button`\n  background: #38d9a9;\n  &:hover {\n    background: #63e6be;\n  }\n  &:active {\n    background: #20c997;\n  }\n\n  z-index: 5; /* 딱히 5로 지정한 이유는 없음 그냥 높은 숫자 선택 */\n  cursor: pointer;\n  width: 80px;\n  height: 80px;\n  display: flex;\n  align-items: center;\n\n  /* 버튼 위치 잡기 */\n  position: absolute;\n  left: 50%;\n  bottom: 0px;\n  transform: translate(-50%, 50%);\n\n  font-size: 60px;\n  color: white;\n  border-radius: 40px;\n\n  border: none;\n  outline: none;\n\n  span {\n    flex: 1;\n  }\n\n  transition: 0.125s all ease-in;\n  ${({ open }) =>\n    open &&\n    css`\n      background: #ff6b6b;\n      &:hover {\n        background: #ff8787;\n      }\n      &:active {\n        background: #fa5252;\n      }\n      transform: translate(-50%, 50%) rotate(45deg);\n    `}\n`;\n\n// 특정 폼의 위치를 정해준다.\nconst InsertFormPositioner = styled.div`\n  width: 100%;\n  bottom: 0;\n  left: 0;\n  position: absolute;\n`;\nconst InsertForm = styled.form`\n  background: #f8f9fa;\n  padding: 32px;\n  padding-bottom: 72px;\n  border-bottom-left-radius: 16px; /* 둥근 모서리를 삐저나가지 않게 하기위한 작업 */\n  border-bottom-right-radius: 16px;\n\n  border-top: 1px solid #e9ecef; /*윗부분 테두리*/\n`;\n\nconst Input = styled.input`\n  padding: 12px;\n  border-radius: 4px;\n  border: 1px solid #dee2e6;\n  width: 100%;\n  outline: none;\n  font-size: 18px;\n\n  box-sizing: border-box; /*이렇게 해야 박스 밖으로 안 삐저나감*/\n`;\n\nfunction TodoCrate() {\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState('');\n  const dispatch = useTodoDispatch();\n  const nextId = useTodoNextId();\n\n  const onToggle = () => setOpen(!open);\n  const onChange = (e) => setValue(e.target.value);\n  const onSubmit = (e) => {\n    e.preventDefault();\n    dispatch({\n      type: 'CREATE',\n      todo: {\n        id: nextId.current,\n        text: value,\n        done: false,\n      },\n    });\n    setValue('');\n    nextId.current += 1;\n  };\n\n  return (\n    <>\n      {open && (\n        <InsertFormPositioner>\n          <InsertForm onSubmit={onSubmit}>\n            <Input\n              placeholder=\"할 일을 입력 후, Enter을 누르세요.\"\n              autoFocus\n              onChange={onChange}\n              value={value}\n            />\n          </InsertForm>\n        </InsertFormPositioner>\n      )}\n      <CircleButton type=\"button\" onClick={onToggle} open={open}>\n        <PlusOutlined />\n      </CircleButton>\n    </>\n  );\n}\n\nexport default React.memo(TodoCrate);\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoHead from './components/TodoHead';\nimport TodoList from './components/TodoList';\nimport TodoCrate from './components/TodoCreate';\nimport { TodoProvider } from './TodoContenxt';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #e9ecef\n  }\n`;\n\nfunction App() {\n  return (\n    <TodoProvider>\n      <GlobalStyle />\n      <TodoTemplate>\n        <TodoHead />\n        <TodoList />\n        <TodoCrate />\n      </TodoTemplate>\n    </TodoProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}